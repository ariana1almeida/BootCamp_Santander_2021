##### Encapsulamento

Quando falamos de encapsulamento, estamos falando efetivamente em proteger alguma informação de alguma forma, ou seja, com uma cápsula.

Para esse exemplo específico:

- Queremos que o nome possa ser alterado.
- Não queremos alterar a data de nascimento.
- Queremos de alguma forma retornar a idade da pessoa.



##### Herança

Como o próprio nome já diz, essa é a capacidade de uma Classe herdar o comportamento de outra. 

Exemplo:

Vamos pensar em um cenário onde queremos modelar um veículo.

```java
public class Veiculo {
    private String modelo;
    private String marca;
}
```

Agora vamos pensar em um cenário onde queremos informações de diversos tipos de veículos.

Por exemplo, quero colocar a quantidade de portas para o caso de carros e as cilindradas em casos de motocicletas.



```java
public class Veiculo {
    private String modelo;
    private String marca;
}

public class Carro extends Veiculo {
    private int quantidadeDePortas;
}

public class Motocicleta extends Veiculo {
    private String cilindradas;
}
```

como a quantidade de portas não é importante para uma motocicleta, nem a quantidade de cilindradas para um carro, é possivel criar a class de veiculos com o que vale para os dois e depois estender o que for específico para algo.



##### Herança vs Composição

A subclasse necessita conhecer, em muitos casos, a implementação da superclasse, o que cria um acoplamento e quebra a nossa premissa básica do isolamentos que vimos no encapsulamento.



##### Polimorfismo

Quando falamos em herança, o verbo ser é mandatório na nossa forma de falar sobre a classe.

Entendemos, portanto, que um carro é um veículo e uma motocicleta também é um veículo.

Quando falamos de polimorfismo, estamos querendo entrar em um cenário onde um objeto pode ser referenciado de várias maneiras.

Continuando no exemplo de veículo, agora nós queremos colocar mais uma característica e uma ação que podem ser comuns aos dois, mas com algumas peculiaridades.

Agora vamos querer calcular o valor aproximado do IPVA dos nossos diferentes tipos de veículos.

Tanto carros quanto motos pagam IPVA, certo? E o cálculo é baseado no valor venal do veículo.

Portanto a primeira conclusão que chegamos é que temos uma característica nova na nossa Classe de Veículos, agora temos o valor venal, portanto:



```java
public class Veiculo {
    private String modelo;
    private String marca;
    
    private double valorVenal;
}
```

Mas precisamos calcular a nossa precisão de imposto.

Vamos partir do princípio que(valores hipotéticos):

- Um veículo teria que pagar, no mínimo, 0,01% do valor venal de IPVA;
- Um carro teria que pagar, no mínimo, 0,07% do valor venal de IPVA;
- Uma moto teria que pagar, no mínimo, 0,03% do valor venal de IPVA;



Para isso, precisaremos definir implementações diferentes de acordo com a classe que estamos trabalhando.

E é onde entraria o Polimorfismo.

Ele nos garantirá a capacidade de um objeto ser referenciado de múltiplas formas.

O java será capaz de identificar qual objeto foi instanciado e, assim, escolher qual método será utilizado.

```java
public class Veiculo {
    private double valorVenal;
    
    public double calculaImposto(){
        return this.valorVenal*0.01;
    }
}


public class Motocicleta extends Veiculo {
    public double calculaImposto(){
        return this.getValorVenal()* 0.03;
    }
}


public static void main (String[] args) {
    Veiculo generico = new Veiculo();
    generico.setValorVenal(1000.0);
    System.out.println(generico.calculaImposto());//10.0
    
    Veiculo carro = new Carro();
    carro.setValorVenal(1000.0);
    System.out.println(carro.calculaImposto()); //70.0
    
    Veiculo moto = new Motocicleta ();
    moto.setValorVenal(1000.0);
    System.out.println(moto.calculaImposto());//30.0

}
```

Exercício final:

Vamos pensar em um cenário onde temos Funcionários. Esses funcionários podem ser: Gerente, Supervisor e Atendente.

Cada tipo de funcionário desses tem políticas diferentes de impostos:

- Gerente paga 0,01%  do salário;
- Supervisor paga 0,05% do salário;
- Atendente paga 0,01% do salário.

monte um modelo que atenda esse cenário. 