# SOLID

SOLID é um acrônimo dos princípios da programação orientada a objetos descritas por Robert C. Martin ("Uncle Bob").

Auxiliam o programador a escrever códigos mais limpos, facilitando a refatoração e estimulando o reaproveitamento do código.



S	.r.p - single resposibility principle

O	.c.p - open closed principle 

L	.s.p - liskov substituition principle

I	.s.p - interface segregation principle

D	.i.p - dependency inversion principle





#### Single Responsibility Principle

"Uma classe deve ter um, e somente um motivo para mudar."

-A classe deve possuir uma única responsabilidade dentro do software



#### Open Closed Principle

Você deve poder estender um comportamento de classe, sem modificá-lo.

-Objetos devem estar abertos para extensão, mas fechados para modificação.

-Quando novos comportamentos precisam ser adicionados no software, devemos estender e não alterar o código fonte original.



#### Liskov Substition Principle

Classes derivadas devem ser substituíveis por suas classes base.

-O princípio da substituição de Liskov foi introduzido por Barbara Liskov em 1987:

"Se para cada objeto o1 do tipo S há um objeto o2 do tipo T de forma que, para todos os programas P, o comportamento de P é inalterado quando 01 é substituído por o2, então S é um subtipo de T."



#### Interface Segregation Principle

Faça interfaces refinadas que são específicas do cliente.

-Uma classe não deve ser forçada a implementar interfaces e métodos que não serão utilizados

-É melhor criar interfaces mais específicas ao invés de termos uma única interface genérica



#### Dependency Inversion Principle

Dependa de abstrações e não de implementações.

-Um módulo de alto nível não deve depender de módulos de baixo nível, ambos devem depender da abstração.

-PS: Inversão de Dependência não é igual a injeção de dependência